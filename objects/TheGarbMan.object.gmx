<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
These are all global variables so they can be used anywhere across all files.
Usually its bad programming practice to use lots of global variables but I dont
give a fuck hahaha
The "sprite_index = grabMan" sets the object TheGarbMan to the sprite of the man standing
and facing right. The reason that I put this here is because it is a create event. If I
didnt tell it which sprite to start out with then there wouldnt be an image until
a key is pressed.
*/

sprite_index = garbMan;
globalvar jumpbool;
globalvar slidebool;
globalvar slideCount;
globalvar lightningAtkBool;
globalvar lightningCount;
globalvar lightningID;
globalvar lightningArrowsBool;
globalvar lightningArrowsCount;
globalvar lightningArrowsID;
globalvar attackDirection;
globalvar lightningArrowDirection;
globalvar lightBallBool;
jumpbool = 0;
slidebool = 0;
slideCount = 0;
lightningAtkBool = 0;
lightningCount = 0;
lightningArrowsBool = 0;
lightningArrowsCount = 0;
attackDirection = 2;
lightningArrowDirection = 0;
lightBallBool = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
This is a step event. That means that every time a refresh happpens, which
is like every couple milliseconds or something like that, this code is ran.
This is called the game loop technically which is where pretty much everything
happens. This step event is in the main character object which im not 100% sure
if that is correct or not but it seems to work fine. So pretty much you have
to check for keys being pressed, update your graphics, and do like calculations
for health or stats in here.
*/

/*
This block of code checks to see if the character can move left or right.
The reason for all of these booleans is to make sure that you can't move left
or right while performing certain actions. Like if the character is sliding to 
the right you don't want to be able to move left until it is done slidding.
*/
if(slidebool == 0 &amp;&amp; lightningAtkBool == 0){
    //move right
    if(keyboard_check(vk_right) &amp;&amp; not keyboard_check(vk_left)){
        if(jumpbool == 1 &amp;&amp; hspeed &gt; 0){
            //this just changes the sprite image, the sprites are located
            //to the leff under the folder sprites
            sprite_index = garbJumpFlipRight;
            //image speed is how quickly the sub-images of the sprite switch
            //if you click on the "garbJumpFlipRight" sprite and click edit you
            //should notice that there are lots of images which are called sub-images
            //if you have sub-images the game maker will cycle through them at a default
            //speed of 1 so im just setting the image speed back to 1 incase it got changed
            image_speed = 1;
        }
        else if(lightningArrowsBool == 1){
            sprite_index = lightningArrowRight;
            image_speed = 1;
        }
        else{
            sprite_index = garbManMove;
            image_speed = .5;
        }
        //this sets how fast the image moves horizontally
        //positive is right and negative is left
        hspeed = 3;
    }
    //move left
    else if(keyboard_check(vk_left) &amp;&amp; not keyboard_check(vk_right)){
        if(jumpbool == 1 &amp;&amp; hspeed &lt; 0) {
            sprite_index = garbJumpFlipLeft;
            image_speed = 1;
        }
        else if(lightningArrowsBool == 1){
            sprite_index = lightningArrowLeft;
            image_speed = 1;
        }
        else{
            sprite_index = garbManMoveLeft;
            image_speed = .5;
        }
        hspeed = -3;
    }
    //stand still
    else {
        image_speed = 1;
        if(jumpbool == 1 &amp;&amp; hspeed == 0) {
            if(sprite_index == garbMan){
                sprite_index = garbJumpFlipRight;
            }
            else if(sprite_index == garbManLeft){
                sprite_index = garbJumpFlipLeft;
            }   
        }
        else if(lightningArrowsBool == 1 &amp;&amp; hspeed == 0){
            /*
            this code block checks to see if the C key has been released.
            When the C key is pressed the sprite changes to the attack image
            so when it is released you need to change it back to the correct walking
            or standing image.
            */
            if(keyboard_check_released(ord('C'))){
                if(sprite_index == lightningArrowRight){
                    sprite_index = garbMan;
                }
                else if(sprite_index == lightningArrowLeft){
                    sprite_index = garbManLeft;
                }
            }
        }
        else{
            if(sprite_index == garbJumpFlipRight){
                sprite_index = garbygarb;
            }
            else if(sprite_index == garbJumpFlipLeft){
                sprite_index = garbygarb;
            }
            else if(sprite_index == garbManMove){
                sprite_index = garbygarb;
            }
            else if(sprite_index == garbManMoveLeft){
                sprite_index = garbygarb;
            }
        hspeed = 0;
        }
    }
    //stand still when right or left is released
    if(keyboard_check_released(vk_right) || keyboard_check_released(vk_left)) {
        hspeed = 0;
        image_speed = 1;
    }
    //jump if space key is pressed
    if(keyboard_check_pressed(vk_space)) {
        image_speed = 1;
        jumpbool = 1;
        gravity = 1;
        /*
        So place free checks to see if the location that you enter, in this case
        the garb man's location x and y plus one pixel down, is a free space.
        So since I put not in front of place_free it is checking to see if there
        is an object there that it can collide with.
        */
        if not place_free(x, y+1){
            vspeed = -12;
        }
    }
}

//check to see if collide with ground and if so stop
/*place meeting checks the location(x, y+vspeed) to see if the object
the ground is located there
The reason that I do this is because you want to check for a collision
before it actually happens. If you check while it happens there is a chance
that your character will get stuck in a wall and it will bug out
*/
if( place_meeting(x, y+vspeed, theGround)) {
    vspeed = 0;
    gravity = 0;
    move_contact_solid(270, -1)
    jumpbool = 0;
}

if (place_meeting(x+hspeed, y, theGround)) {
    hspeed = 0;
}

if (place_free(x, y + 1)) {
    gravity = 1;
}

//slide animation count
/*
Now im sure there is an easier way to do this. This is 
just my unusual style of programming haha.
So if the slidebool is set to true, which is 1 in this case, then I have
a counter run. This counter is kinda like an estimate of how many steps
it is going to take to complete the slide animation. So when the counter
gets to 18 then he should be done sliding. This works now but it
may or may not work when the game starts to get longer because it will
take longer and longer to execute the step event. Like now it may take 10
milliseconds but later it may take 20 milliseconds which would cause a problem
*/
if(slidebool == 1){
    image_speed = 1;
    slideCount++;
    if(slideCount == 18){
        slidebool = 0;
        slideCount = 0;
        if(sprite_index == garbSlideRight){
            sprite_index = garbMan;
        }
        else if(sprite_index == garbSlideLeft){
            sprite_index = garbManLeft;
        }
    }
}

//slide animation
/*
This checks to make sure that I can slide and if the Z key has been pressed.
If so I need to figure out wich way I need to slide so I check the current 
sprite_index value to figure out if I was facing left or right. Then I change
the sprite_index value to the correct corresponding direction.
*/
if(jumpbool == 0 &amp;&amp; lightningAtkBool == 0 &amp;&amp; lightningArrowsBool == 0){
    image_speed = 1;
    if (keyboard_check_pressed(ord('Z'))){
        slidebool = 1;
        if(sprite_index == garbMan || sprite_index == garbManMove){
            hspeed = 8;
            sprite_index = garbSlideRight;
        }
        else if(sprite_index == garbManLeft || sprite_index == garbManMoveLeft){
            hspeed = -8;
            sprite_index = garbSlideLeft;
        }
    }
}

//sliding lighting arrow attack
/*
This creates 5 instances of the shitty little lightning arrow drawing and
sets them at different locations to make it look like an arc of arrows.
*/
if(slidebool == 1){
    if(keyboard_check_pressed(ord('C'))){
        instance_create(x,y-5,LightUP);
        instance_create(x+10,y-3,LightUPRight);
        instance_create(x+20,y-1,LightUPRight2);
        instance_create(x-10,y-3,LightUPLeft);
        instance_create(x-20,y-1,LightUPLeft2);
    }
}

//lightning attack count
/*
this is just like the slide counter. it pretty much does the same thing
except for it has to create instances of the arrows which travel left or right
depending on which way the character is facing
*/
if(lightningAtkBool == 1){
    image_speed = 1;
    lightningCount++;
    if(lightningCount == 10){
        if(attackDirection == 0){
            lightningID = instance_create(x-5,y-630,lightning);
        }
        else{
            lightningID = instance_create(x+5, y-630, lightning);
        }
    }
    if(lightningCount == 20){
        if(sprite_index = lightningAttackRight){
            instance_create(x,y,lightningBoltAttackRight);
        }
        else{
            instance_create(x-165,y,lightningBoltAttackLeft);
        }
    }
    if(lightningCount == 28){
        with lightning instance_destroy();
    }
    if(lightningCount == 28){
        if(attackDirection == 0){
            with lightningBoltAttackRight instance_destroy();
        }
        else if(attackDirection == 1){
            with lightningBoltAttackLeft instance_destroy();
        }
        else{
            show_message("error in lighting attack");
        }
    }
    if(lightningCount == 30){
        lightningAtkBool = 0;
        lightningCount = 0;
        if(sprite_index == lightningAttackRight){
            sprite_index = garbMan;
        }
        if(sprite_index == lightningAttackLeft){
            sprite_index = garbManLeft;
        }
    }
}

//lightning attack animation
/*
This is similar to the other animations, just checks to see if X is pressed
and sets the correct sprite and starts the counter.
*/
if(jumpbool == 0 &amp;&amp; slidebool == 0 &amp;&amp; lightningArrowsBool == 0){
    image_speed = 1;
     if (keyboard_check_pressed(ord('X'))){
        lightningAtkBool = 1;
        if(sprite_index == garbMan || sprite_index == garbManMove) {
            attackDirection = 0;
            hspeed = 0;
            sprite_index = lightningAttackRight;
        }
        else if(sprite_index == garbManLeft || sprite_index == garbManMoveLeft){
            attackDirection = 1;
            hspeed = 0;
            sprite_index = lightningAttackLeft;
        }
        
     }
}

//lightning ball attack
/*
same as the other animations
*/
if(jumpbool == 0 &amp;&amp; slidebool == 0 &amp;&amp; lightningArrowsBool == 0 &amp;&amp; lightningAtkBool == 0){
     if (keyboard_check_pressed(ord('V'))){
        lightBallBool = 1;
        if(sprite_index == garbMan || sprite_index == garbManMove){
            instance_create(x+10, y, lightBallRight);
        }
        else if(sprite_index == garbManLeft || sprite_index == garbManMoveLeft){
            instance_create(x-10, y, lightBallLeft);
        }
     }
}

//Lightning arrow attack
if(jumpbool == 0 &amp;&amp; slidebool == 0 &amp;&amp; lightningAtkBool == 0){
    image_speed = 1;
    if (keyboard_check_pressed(ord('C'))){
        lightningArrowsBool = 1;
        if(sprite_index == garbMan || sprite_index == garbManMove){
            instance_create(x+10, y, light_Shuriken_right);
        }
        else if(sprite_index == garbManLeft || sprite_index == garbManMoveLeft){
            instance_create(x-10, y, light_Shuriken_left);
        }
        if(sprite_index == garbMan){
            sprite_index = lightningArrowRight;
        }
        else if(sprite_index == garbManLeft){
            sprite_index = lightningArrowLeft;
        }
    }
}

if(keyboard_check_released(ord('C'))){
    lightningArrowsBool = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
